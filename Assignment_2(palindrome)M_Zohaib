{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "96634688-566b-4b06-a49c-cbd175198b21",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a string to check if it is a palindrome:  Level\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "level is a palindrome.\n"
     ]
    }
   ],
   "source": [
    "toCheckString = input(\"Enter a string to check if it is a palindrome: \")\n",
    "reversed_string = toCheckString[::-1]\n",
    "toCheckString = toCheckString.lower()\n",
    "reversed_string = reversed_string.lower()\n",
    "if toCheckString == reversed_string:\n",
    "    print(f\"{toCheckString} is a palindrome.\")\n",
    "else:\n",
    "    print(f\"{toCheckString} is not a palindrome.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e45f473b-33f2-4508-9a51-4c284cffdb28",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a string to check if it is a palindrome:  hello\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hello is not a palindrome.\n"
     ]
    }
   ],
   "source": [
    "toCheckString = input(\"Enter a string to check if it is a palindrome: \")\n",
    "reversed_string = toCheckString[::-1]\n",
    "toCheckString = toCheckString.lower()\n",
    "reversed_string = reversed_string.lower()\n",
    "if toCheckString == reversed_string:\n",
    "    print(f\"{toCheckString} is a palindrome.\")\n",
    "else:\n",
    "    print(f\"{toCheckString} is not a palindrome.\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c2f71e3f-840a-4ccb-a2f5-55f42879191a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a string to check if it is a palindrome:  madem\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "madem is not a palindrome.\n"
     ]
    }
   ],
   "source": [
    "toCheckString = input(\"Enter a string to check if it is a palindrome: \")\n",
    "reversed_string = toCheckString[::-1]\n",
    "toCheckString = toCheckString.lower()\n",
    "reversed_string = reversed_string.lower()\n",
    "if toCheckString == reversed_string:\n",
    "    print(f\"{toCheckString} is a palindrome.\")\n",
    "else:\n",
    "    print(f\"{toCheckString} is not a palindrome.\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b87745bf-eb47-44be-8a6f-7e75185a16d1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a string to check if it is a palindrome:  A man a plan\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a man a plan is not a palindrome.\n"
     ]
    }
   ],
   "source": [
    "toCheckString = input(\"Enter a string to check if it is a palindrome: \")\n",
    "reversed_string = toCheckString[::-1]\n",
    "toCheckString = toCheckString.lower()\n",
    "reversed_string = reversed_string.lower()\n",
    "if toCheckString == reversed_string:\n",
    "    print(f\"{toCheckString} is a palindrome.\")\n",
    "else:\n",
    "    print(f\"{toCheckString} is not a palindrome.\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e1d8bdd0-74ef-40c1-a299-d68b3be769e1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a string to check if it is a palindrome:  zohaib\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "zohaib is not a palindrome.\n"
     ]
    }
   ],
   "source": [
    "toCheckString = input(\"Enter a string to check if it is a palindrome: \")\n",
    "reversed_string = toCheckString[::-1]\n",
    "toCheckString = toCheckString.lower()\n",
    "reversed_string = reversed_string.lower()\n",
    "if toCheckString == reversed_string:\n",
    "    print(f\"{toCheckString} is a palindrome.\")\n",
    "else:\n",
    "    print(f\"{toCheckString} is not a palindrome.\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cf5172ed-9592-42ac-8ec2-929012c9e675",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a string to check if it is a palindrome:  amanaplanacanalpanama\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "amanaplanacanalpanama is a palindrome.\n"
     ]
    }
   ],
   "source": [
    "toCheckString = input(\"Enter a string to check if it is a palindrome: \")\n",
    "reversed_string = toCheckString[::-1]\n",
    "toCheckString = toCheckString.lower()\n",
    "reversed_string = reversed_string.lower()\n",
    "if toCheckString == reversed_string:\n",
    "    print(f\"{toCheckString} is a palindrome.\")\n",
    "else:\n",
    "    print(f\"{toCheckString} is not a palindrome.\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a0438141-7bd6-46b5-a865-496cdd93841e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
